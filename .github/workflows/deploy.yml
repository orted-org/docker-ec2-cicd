name: Deploy to production

on:
  push:
    branches: [ main ]

jobs:

  deploy:
    name: Build image
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dockercicd_ecr_img
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

    - name: SSH into EC2 and Deploy
      env:
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY  }}
        HOSTNAME : ${{ secrets.HOSTNAME  }}
        USER_NAME : ${{ secrets.USER_NAME  }}
      run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            
            #Now we have got the access of EC2 and we will start the deploy .
            docker stack deploy --with-registry-auth -c docker-compose.yml node-nginx-stack
          '